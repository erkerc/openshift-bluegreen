apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
    pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
      "DeploymentConfig"}]'
  labels:
    app: cicd-pipeline
    group: cicd
    name: cicd-pipeline
    template: cicd
  name: bluegreen-example-pipeline
spec:
  failedBuildsHistoryLimit: 5
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      env:
      - name: COLOR
        value: yellow
      jenkinsfile: |-
        import java.text.SimpleDateFormat;
        node {
          // Blue/Green Deployment into Production. 
          // -------------------------------------
          def project  = ""
          def dest     = "example-green"
          def active   = ""
          def newcolor = ""

          switch (BUILD_NUMBER.toInteger() % 10) {
            case 1:
                newcolor="red"
                break
            case 2:
                newcolor="maroon"
                break
            case 3:
                newcolor="yellow"
                break
            case 4:
                newcolor="magenta"
                break
            case 5:
                newcolor="purple"
                break
            case 6:
                newcolor="orange"
                break
            case 7:
                newcolor="cyan"
                break
            case 8:
                newcolor="navy"
                break
            case 9:
                newcolor="green"
                break
            case 0:
                newcolor="blue"
                break
          }

          stage('preamble') {
            script {
              openshift.withCluster() {
                openshift.withProject() {
                  echo "Using project: ${openshift.project()}"
                }
              }
            }
          }
          stage('Determine Deployment color') {
             script {
              openshift.withCluster() {
                openshift.withProject() {
                  echo "Using project: ${openshift.project()}"
                  sh "oc get route example -n ${openshift.project()} -o jsonpath='{ .spec.to.name }' > activesvc.txt"
                  // Determine currently active Service
                  active = readFile('activesvc.txt').trim()
                  if (active == "example-green") {
                    dest = "example-blue"
                  }
                  echo "Active svc: " + active
                  echo "Dest svc:   " + dest
                  echo "New color:  " + newcolor
                }
              }
            }
          }

          stage('Build new version') {
            echo "Building ${dest}"
            sh "oc set env dc ${dest} COLOR=${newcolor}"
          }
          stage('Deploy new Version') {
            echo "Deploying to ${dest}"
            script {
              openshift.withCluster() {
                openshift.withProject() {
                  openshift.selector("dc","${dest}").rollout().latest();
                  timeout(5) { 
                    openshift.selector("dc", "${dest}").related('pods').untilEach(1) {
                      return (it.object().status.phase == "Running")
                    }
                  }
                }
              }   
            }
          }
          stage('Switch over to new Version') {
            input "Switch Production?"
            sh 'oc patch route example -p \'{"spec":{"to":{"name":"' + dest + '"}}}\''
            sh 'oc get route example > oc_out.txt'
            oc_out = readFile('oc_out.txt')
            echo "Current route configuration: " + oc_out
          }
        }
    type: JenkinsPipeline
  successfulBuildsHistoryLimit: 5
